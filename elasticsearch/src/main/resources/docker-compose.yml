version: "3.8"


volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local


networks:
  default:
    name: elastic
    external: false


services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0" # (루트 사용자)로 설정
    # 설정 스크립트를 실행
    command: >
      bash -c '
        # 환경 변수 확인 => ELASTIC_PASSWORD, KIBANA_PASSWORD 환경변수가 있는지.
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        
        # 8.0 부터는 인증서가 필요하다.
        # CA가 존재하지 않으면 생성
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
      
        # 인증서가 존재하지 않으면 생성
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
      
        # 파일 권한 설정
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
      
        # Elasticsearch가 가동되고 있는지 확인
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        
        # Kibana 시스템 사용자 비밀번호 설정
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        
        # 완료
        echo "All done!";
      '
    healthcheck:
      # config/certs/es01/es01.crt 파일의 존재 여부를 검사
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s # 1초마다
      timeout: 5s # 5초 이상은 타임아웃
      retries: 120 # 최대 120번 시도
  es01:
    depends_on:
      setup:
        condition: service_healthy # setup 서비스가 성공적으로 실행된 후에 시작
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION} # Elasticsearch 이미지를 사용하여 컨테이너 생성
    labels:
      co.elastic.logs/module: elasticsearch # 로그 모듈로 elasticsearch 사용
    volumes:
      - certs:/usr/share/elasticsearch/config/certs # 인증서 디렉토리를 컨테이너에 마운트
      - esdata01:/usr/share/elasticsearch/data # 데이터 디렉토리를 컨테이너에 마운트
    ports:
      - ${ES_PORT}:9200
    environment: # 환경 변수 설정
      - node.name=es01 # 노드 이름 설정
      - cluster.name=${CLUSTER_NAME} # 클러스터 이름 설정
      - discovery.type=single-node # 단일 노드 모드 설정
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # Elastic 사용자 비밀번호 설정
      - bootstrap.memory_lock=true # 메모리 잠금 설정
      - xpack.security.enabled=true # X-Pack 보안 활성화
      - xpack.security.http.ssl.enabled=true # HTTP SSL 활성화
      - xpack.security.http.ssl.key=certs/es01/es01.key # HTTP SSL 키 파일 경로
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt # HTTP SSL 인증서 파일 경로
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt # HTTP SSL CA 파일 경로
      - xpack.security.transport.ssl.enabled=true # Transport SSL 활성화
      - xpack.security.transport.ssl.key=certs/es01/es01.key # Transport SSL 키 파일 경로
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt # Transport SSL 인증서 파일 경로
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt # Transport SSL CA 파일 경로
      - xpack.security.transport.ssl.verification_mode=certificate # Transport SSL 인증 모드 설정
      - xpack.license.self_generated.type=${LICENSE} # 라이선스 유형 설정
    mem_limit: ${ES_MEM_LIMIT} # 메모리 제한 설정
    ulimits: # ulimit 설정
      memlock: # 메모리 락은 무제한으로 설정
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana # 로그 모듈로 kibana 사용
    volumes:
      - certs:/usr/share/kibana/config/certs # 인증서 디렉토리를 컨테이너에 마운트
      - kibanadata:/usr/share/kibana/data # 데이터 디렉토리를 컨테이너에 마운트
    ports:
      - ${KIBANA_PORT}:5601 # 호스트의 KIBANA_PORT 포트를 컨테이너의 5601 포트로 매핑
    environment: # 환경 변수 설정
      - SERVERNAME=kibana # Kibana 서버 이름 설정
      - ELASTICSEARCH_HOSTS=https://es01:9200 # Elasticsearch 호스트 설정
      - ELASTICSEARCH_USERNAME=kibana_system # Elasticsearch 사용자 이름 설정
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD} # Elasticsearch 비밀번호 설정
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt # Elasticsearch SSL 인증서 권한 설정
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY} # X-Pack 보안 암호화 키 설정
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY} # X-Pack 암호화된 저장된 객체 암호화 키 설정
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY} # X-Pack 보고서 암호화 키 설정
    mem_limit: ${KB_MEM_LIMIT} # 메모리 제한 설정
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200