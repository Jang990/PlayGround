input {
  # v2 설정
  jdbc {
    type => "product_v2"
    jdbc_driver_library => "${JDBC_DRIVER_PATH}"
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DB}"
    jdbc_user => "${MYSQL_USER}"
    jdbc_password => "${MYSQL_PASSWORD}"
    schedule => "*/1 * * * *" # 1분마다 실행

    # sql_last_value -> logstash에서 내부적으로 다루는 마지막 실행 시간 변수
    statement => "SELECT * FROM productv2 WHERE updated_at > :sql_last_value" #  마지막 실행 시간 이후에 업데이트된 updated_at 컬럼 값을 기준으로 데이터를 가져옴
  }

  # v3 설정
#   jdbc {
#       type => "product_v3"
#       jdbc_driver_library => "${JDBC_DRIVER_PATH}"
#       jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
#       jdbc_connection_string => "jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DB}"
#       jdbc_user => "${MYSQL_USER}"
#       jdbc_password => "${MYSQL_PASSWORD}"
#       schedule => "*/30 * * * * *"
#
#       statement => "
#         SELECT p.id as product_id, p.price, p.stock, p.name, p.created_at, p.updated_at, t.id as tag_id, t.tag_name
#         FROM productv3 p
#         LEFT JOIN product_tagv3 pt ON p.id = pt.product_id
#         LEFT JOIN tagv3 t ON pt.tag_id = t.id
#         WHERE updated_at > :sql_last_value
#         ORDER BY product_id
#       "
#     }
}

#filter {
#  if [type] == "product_v3" {  # 데이터 타입이 product_v3일 경우에만 처리
#      aggregate {
#        task_id => "%{product_id}"  # product_id를 기준으로 데이터를 그룹화
#        code => "
#            # product_id로 그룹화된 데이터를 설정합니다
#            map['id'] = event.get('product_id')
#            map['price'] = event.get('price')
#            map['stock'] = event.get('stock')
#            map['name'] = event.get('name')
#            map['createdAt'] = event.get('created_at')
#            map['updatedAt'] = event.get('updated_at')
#
#            # tagInfoV3 배열을 초기화하거나 기존 배열을 사용합니다
#            map['tag_info_v3'] ||= []
#            # tag_id와 tag_name을 tagInfoV3 배열에 추가합니다
#            if event.get('tag_id') != nil
#              map['tag_info_v3'] << {'id' => event.get('tag_id'), 'tag_name' => event.get('tag_name')}
#            end
#
#            logger.info('Aggregated event: ', map)
#            event.cancel()
#
#            # event.cancel을 주석처리하면 각각의 쿼리 row가 output으로 나옴
#            # event.cancel을 동작시키면 product_id를 기준으로 tag정보가 집계가 되지만 output쪽으로 데이터가 나가지 않음.
#            # 예상하건데 누적된 map정보가 push_map_as_event_on_timeout을 통해서 푸시되지 않는 것 같음.
#        "
#        push_map_as_event_on_timeout => true  # 이전 map을 최종 이벤트로 푸시
#        timeout => 5  # 3초 동안 그룹화를 유지
#      }
#    }
#}

output {
    if [type] == "product_v2" {
      elasticsearch {
        hosts => ["http://es01:9200"]
        index => "product_v2"
        document_id => "%{id}"
        user => "elastic"
        password => "changeme"
      }
    }

#   if [type] == "product_v3" {
#     stdout { codec => rubydebug }
#     elasticsearch {
#       hosts => ["http://es01:9200"]
#       index => "product_v3"
#       document_id => "%{id}"
#       user => "elastic"
#       password => "changeme"
#     }
#   }
}
